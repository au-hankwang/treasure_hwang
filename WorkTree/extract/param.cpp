#include "pch.h"
#include "template.h"
#include "multithread.h"
#include "circuit.h"
#include "wirelist.h"

#ifdef _MSC_VER
 #pragma optimize("",off)
#endif

extern bool finfet;


struct transistorpowertype{
   double nmos_gate_capacitance;         // fF/um, fF/fin, channel length is ignored
   double pmos_gate_capacitance;         // fF/um, fF/fin, channel length is ignored
   double nmos_diff_capacitance;         // fF/um, fF/fin, channel length is ignored
   double pmos_diff_capacitance;         // fF/um, fF/fin, channel length is ignored
   double min_channel_length;
   double channel_length_exponent;  // um where the leakage will be cut in half
   double two_high_derating;        // how much leakage is reduce by two series devices both off
   interpolatetype nmos_leakage[20];   // nA/um, nA/fin
   interpolatetype pmos_leakage[20];
   double InterpolateLeakage(bool nmos, float width, float length) const
      {
      int i;
      double leak=0.0;
      if (width<=0.0) FATAL_ERROR;
      const interpolatetype *model = nmos ? nmos_leakage : pmos_leakage;

      i=0;
      while (model[i].sample < width && model[i].sample>0.0)
         i++;
      if (i>=20) FATAL_ERROR;
      if (model[i].sample<=0.0)
         return model[i-1].value*width;   // width is greater than table
      if (i==0)
         return model[0].value*width;     // width is less than table

      double slope = (model[i].value - model[i-1].value) / (model[i].sample - model[i-1].sample);
      leak = (width-model[i-1].sample)* slope + model[i-1].value;
      return leak * width;
      };
   };

// data is from arun, 2/24/2016, FF 0.8V 100C, but scaled up by a factor of 3.0X by Binto based on rspice sims and layout based sherlock runs to match the
// power numbers between rspice and sherlock.

const transistorpowertype svt_14nm = 
   {
   .084, 0.097, 
   0.006, 0.007,
   0.014, 0.000,
   0.2,
   {{ 1, 37.5}},
   {{ 1, 37}}   };
const transistorpowertype svt2_14nm = 
   {
   .089, 0.10, 
   0.005, 0.006,
   0.014, 0.000,
   0.2,
   {{ 1, 21.6}},
   {{ 1, 21.5}}   };
const transistorpowertype svt4_14nm={};
const transistorpowertype svt8_14nm={};

const transistorpowertype lvt_14nm = 
   {
   .083, 0.10, 
   0.005, 0.006,
   0.014, 0.000,
   0.2,
   {{ 1, 8.2}},
   {{ 1, 6.8}}   };
const transistorpowertype lvt2_14nm = 
   {
   .087, 0.10, 
   0.005, 0.006,
   0.014, 0.000,
   0.2,
   {{ 1, 5.3}},
   {{ 1, 4.3}}   };
const transistorpowertype lvt4_14nm={};
const transistorpowertype lvt8_14nm={};

const transistorpowertype rvt_14nm = 
   {
   .069, 0.079, 
   0.005, 0.006,
   0.014, 0.000,
   0.2,
   {{ 1, 1.4}},
   {{ 1, 1.2}}   };
const transistorpowertype rvt2_14nm = 
   {
   .075, 0.084, 
   0.005, 0.006,
   0.014, 0.000,
   0.2,
   {{ 1, 1.07}},
   {{ 1, 0.8}}   };
const transistorpowertype rvt4_14nm={}; 
const transistorpowertype rvt8_14nm={}; 

const transistorpowertype sram_14nm =
   {
   .074, 0.09, 
   0.007, 0.009,
   0.022, 0.000,
   0.2,
   {{ 1, .340}}, // average of wl and pd for the low vt type to be pessimistic
   {{ 1, .359}}   };

//the below is for egvt. However the analog team draws egvt devices in any and all possible pla and we can't possibly characterise all of them
//below is a one size fits all container for eg devices based on raptor sims from /t98/phys/t98_1.0/custom/spice/cmos14lpp_process_char/raptor_param/
const transistorpowertype egvtxx_14nm =
  {
    0.16, 0.15,
    .018, .02,
    .014, 0,
    0.2,
    {{1, 4.9},{2, 7.4},{3, 10.3},{4, 13.4},{5, 16.6},{6, 20},{7, 23.4},{8, 26.9}},
    {{1, 2.1},{2, 2.8},{3, 3.6},{4, 4.5},{5, 5.5},{6, 6.5},{7, 7.5},{8, 8.5}}
  };

const transistorpowertype lvt = 
   {
   1.04, 0.85, 
   0.88, 0.85,
   0.030, 0.005,
   0.2,
   {{ 0.08, 1033},{ 0.10, 1163},{ 0.12, 1297},{ 0.16, 1446},{ 0.20, 1578},{ 0.25, 1704},{ 0.32, 1833},{ 0.40, 1941},{ 0.50, 2040},{ 0.64, 2138},{ 0.80, 2216},{ 1.00, 2288},{ 1.33, 2370},{ 1.60, 2416},{ 2.00, 2466},{ 2.67, 2519}},
   {{ 0.08, 744},{ 0.10, 822},{ 0.12, 925},{ 0.16, 1066},{ 0.20, 1214},{ 0.25, 1372},{ 0.32, 1541},{ 0.40, 1671},{ 0.50, 1764},{ 0.64, 1821},{ 0.80, 1841},{ 1.00, 1843},{ 1.33, 1834},{ 1.60, 1830},{ 2.00, 1824},{ 2.67, 1820}}
   };
const transistorpowertype lvt34 = 
   {
   1.04, 0.85, 
   0.88, 0.85,
   0.030, 0.005,
   0.2,
   {{ 0.08, 545},{ 0.10, 610},{ 0.12, 679},{ 0.16, 755},{ 0.20, 823},{ 0.25, 887},{ 0.32, 954},{ 0.40, 1009},{ 0.50, 1060},{ 0.64, 1112},{ 0.80, 1155},{ 1.00, 1194},{ 1.33, 1240},{ 1.60, 1265},{ 2.00, 1294},{ 2.67, 1324}},
   {{ 0.08, 235},{ 0.10, 257},{ 0.12, 285},{ 0.16, 324},{ 0.20, 364},{ 0.25, 408},{ 0.32, 454},{ 0.40, 489},{ 0.50, 514},{ 0.64, 534},{ 0.80, 534},{ 1.00, 531},{ 1.33, 530},{ 1.60, 528},{ 2.00, 526},{ 2.67, 526}}
   };
const transistorpowertype lvt38 = 
   {
   1.04, 0.85, 
   0.88, 0.85,
   0.030, 0.005,
   0.2,
   {{ 0.08, 376},{ 0.10, 419},{ 0.12, 463},{ 0.16, 512},{ 0.20, 555},{ 0.25, 596},{ 0.32, 639},{ 0.40, 674},{ 0.50, 707},{ 0.64, 740},{ 0.80, 768},{ 1.00, 794},{ 1.33, 824},{ 1.60, 841},{ 2.00, 860},{ 2.67, 880}},
   {{ 0.08, 116},{ 0.10, 126},{ 0.12, 138},{ 0.16, 156},{ 0.20, 174},{ 0.25, 193},{ 0.32, 214},{ 0.40, 229},{ 0.50, 240},{ 0.64, 247},{ 0.80, 249},{ 1.00, 249},{ 1.33, 247},{ 1.60, 247},{ 2.00, 246},{ 2.67, 245}}
   };
// based on spice(o78_feas/dc_cap)
// nmos lvt30       as inverter 1.04fF, .84fF tinv
// nmos rvt30/34/38 as inverter  .96/1.01/1.07fF, .78/.83/.88fF tinv
// nmos hvt30/34    as inverter  .93/ .98fF, .76/.81fF tinv
// pmos lvt30       as inverter  .85fF, .68fF tinv
// pmos rvt30/34/38 as inverter  .83/ .875/.92fF, .66/.70/.74fF tinv
// pmos hvt30/34    as inverter  .79/ .825fF, .62/.65fF tinv
// nmos lvt diode cap 20ps edge nf=1 switching/tied off .88/.43
// nmos rvt diode cap 20ps edge nf=1 switching/tied off .73/.47   
// nmos hvt diode cap 20ps edge nf=1 switching/tied off .79/.72   
// pmos lvt diode cap 20ps edge nf=1 switching/tied off .85/.32
// pmos rvt diode cap 20ps edge nf=1 switching/tied off .71/.42   
// pmos hvt diode cap 20ps edge nf=1 switching/tied off .78/.64   
const transistorpowertype rvt = 
   {
   0.96, 0.83, 
   0.73, 0.71,
   0.030, 0.005,
   0.2,
//   {{ 0.08, 885.00 },{ 0.09, 882.22 },{ 0.10, 884.00 },{ 0.12, 897.60 },{ 0.16, 928.12 },{ 0.20, 966.00 },{ 0.25, 1013.20 },{ 0.32, 1072.81 },{ 0.40, 1131.00 },{ 0.50, 1190.60 },{ 0.64, 1255.78 },{ 0.80, 1312.50 },{ 1.00, 1364.00 },{ 1.33, 1423.86 },{ 1.60, 1456.88 },{ 2.00, 1493.50 },{ 2.67, 1533.01 },{ 3.00, 1547.67 }},
//   {{ 0.08, 482.50 },{ 0.09, 496.67 },{ 0.10, 511.00 },{ 0.12, 552.00 },{ 0.16, 610.00 },{ 0.20, 673.00 },{ 0.25,  742.00 },{ 0.32,  817.19 },{ 0.40,  874.00 },{ 0.50,  913.40 },{ 0.64,  935.31 },{ 0.80,  939.00 },{ 1.00,  934.10 },{ 1.33,  924.23 },{ 1.60,  918.75 },{ 2.00,  912.50 },{ 2.67,  904.73 },{ 3.00,  901.33 }}
//   {{ 0.08,    66.37},{ 0.10,    84.45},{ 0.13,    95.74},{ 0.16,   105.08},{ 0.20,   117.68},{ 0.25,   123.09},{ 0.32,   127.68},{ 0.40,   131.29},{ 0.50,   133.25},{ 0.64,   137.95},{ 0.80,   140.30},{ 1.00,   142.42},{ 1.33,   147.31},{ 1.60,   145.37},{ 2.00,   147.83},{ 2.67,   151.69}},
//   {{ 0.08,    11.78},{ 0.10,    16.33},{ 0.13,    28.74},{ 0.16,    47.12},{ 0.20,    64.72},{ 0.25,    71.00},{ 0.32,    68.90},{ 0.40,    71.71},{ 0.50,    74.45},{ 0.64,    80.07},{ 0.80,    76.37},{ 1.00,    76.16},{ 1.33,    77.41},{ 1.60,    79.21},{ 2.00,    84.09},{ 2.67,    85.37}}   
//   {{ 0.08,   144.84},{ 0.10,   188.92},{ 0.13,   219.29},{ 0.16,   242.43},{ 0.20,   270.97},{ 0.25,   289.62},{ 0.32,   301.82},{ 0.40,   313.51},{ 0.50,   320.35},{ 0.64,   327.37},{ 0.80,   337.43},{ 1.00,   341.41},{ 1.33,   350.82},{ 1.60,   351.67},{ 2.00,   357.29},{ 2.67,   358.25}},
//   {{ 0.08,    27.94},{ 0.10,    41.02},{ 0.13,    70.93},{ 0.16,   118.11},{ 0.20,   169.16},{ 0.25,   192.71},{ 0.32,   183.90},{ 0.40,   199.30},{ 0.50,   209.76},{ 0.64,   229.85},{ 0.80,   221.68},{ 1.00,   223.10},{ 1.33,   228.29},{ 1.60,   236.86},{ 2.00,   246.00},{ 2.67,   253.35}}
//   {{ 0.08,    26.65},{ 0.10,    34.03},{ 0.13,    38.43},{ 0.16,    42.62},{ 0.20,    46.92},{ 0.25,    49.00},{ 0.32,    50.19},{ 0.40,    51.81},{ 0.50,    52.41},{ 0.64,    53.71},{ 0.80,    54.52},{ 1.00,    55.53},{ 1.33,    57.22},{ 1.60,    57.47},{ 2.00,    58.39},{ 2.67,    59.80}},
//   {{ 0.08,     6.69},{ 0.10,     9.52},{ 0.13,    14.90},{ 0.16,    22.69},{ 0.20,    31.43},{ 0.25,    34.39},{ 0.32,    35.21},{ 0.40,    38.16},{ 0.50,    39.71},{ 0.64,    42.85},{ 0.80,    40.85},{ 1.00,    40.62},{ 1.33,    40.95},{ 1.60,    42.02},{ 2.00,    43.86},{ 2.67,    44.69}}   
   {{ 0.08,    260},{ 0.10,    267},{ 0.13,    278},{ 0.16,    294},{ 0.20,    312},{ 0.25,    332},{ 0.32,    357},{ 0.40,    380},{ 0.50,    404},{ 0.64,    430},{ 0.80,    451},{ 1.00,    472},{ 1.33,    495},{ 1.60,    508},{ 2.00,    522},{ 2.67,    537}},
   {{ 0.08,    130},{ 0.10,    142},{ 0.13,    158},{ 0.16,    181},{ 0.20,    205},{ 0.25,    231},{ 0.32,    261},{ 0.40,    285},{ 0.50,    304},{ 0.64,    318},{ 0.80,    324},{ 1.00,    328},{ 1.33,    330},{ 1.60,    331},{ 2.00,    333},{ 2.67,    334}}   
   };
const transistorpowertype rvt34 = 
   {
   1.01, 0.875, 
   0.73, 0.71,
   0.030, 0.005,
   0.2,
//   {{ 0.08, 537.50 },{ 0.09, 534.44 },{ 0.10, 535.00 },{ 0.12, 540.80 },{ 0.16, 556.88 },{ 0.20, 577.50 },{ 0.25, 603.20 },{ 0.32, 636.25 },{ 0.40, 668.25 },{ 0.50, 701.00 },{ 0.64, 736.72 },{ 0.80, 767.37 },{ 1.00, 795.70 },{ 1.33, 828.21 },{ 1.60, 846.25 },{ 2.00, 866.00 },{ 2.67, 887.47 },{ 3.00, 895.33 }},
//   {{ 0.08, 181.25 },{ 0.09, 183.33 },{ 0.10, 187.00 },{ 0.12, 196.80 },{ 0.16, 211.25 },{ 0.20, 227.50 },{ 0.25, 244.00 },{ 0.32, 261.88 },{ 0.40, 274.75 },{ 0.50, 283.00 },{ 0.64, 286.25 },{ 0.80, 285.12 },{ 1.00, 282.10 },{ 1.33, 277.49 },{ 1.60, 275.00 },{ 2.00, 272.35 },{ 2.67, 269.20 },{ 3.00, 267.90 }}
//   {{ 0.08,    42.81},{ 0.10,    54.85},{ 0.13,    61.16},{ 0.16,    66.86},{ 0.20,    73.79},{ 0.25,    77.93},{ 0.32,    82.11},{ 0.40,    83.93},{ 0.50,    87.03},{ 0.64,    87.99},{ 0.80,    88.60},{ 1.00,    91.21},{ 1.33,    92.40},{ 1.60,    95.46},{ 2.00,    95.55},{ 2.67,    95.80}},
//   {{ 0.08,     6.75},{ 0.10,     8.74},{ 0.13,    14.48},{ 0.16,    21.15},{ 0.20,    28.15},{ 0.25,    30.80},{ 0.32,    30.54},{ 0.40,    30.93},{ 0.50,    32.27},{ 0.64,    34.04},{ 0.80,    32.49},{ 1.00,    34.51},{ 1.33,    34.00},{ 1.60,    36.31},{ 2.00,    37.04},{ 2.67,    36.86}}
//   {{ 0.08,    85.62},{ 0.10,   113.68},{ 0.13,   129.49},{ 0.16,   145.66},{ 0.20,   159.88},{ 0.25,   171.44},{ 0.32,   181.95},{ 0.40,   189.32},{ 0.50,   196.64},{ 0.64,   198.54},{ 0.80,   201.39},{ 1.00,   206.34},{ 1.33,   208.58},{ 1.60,   215.29},{ 2.00,   217.94},{ 2.67,   219.40}},
//   {{ 0.08,    15.01},{ 0.10,    20.64},{ 0.13,    34.03},{ 0.16,    51.35},{ 0.20,    69.48},{ 0.25,    78.76},{ 0.32,    78.48},{ 0.40,    80.43},{ 0.50,    83.45},{ 0.64,    90.82},{ 0.80,    90.02},{ 1.00,    92.82},{ 1.33,    93.30},{ 1.60,   101.47},{ 2.00,   103.05},{ 2.67,   101.67}}
//   {{ 0.08,    18.53},{ 0.10,    23.61},{ 0.13,    26.07},{ 0.16,    28.54},{ 0.20,    31.24},{ 0.25,    32.29},{ 0.32,    33.90},{ 0.40,    35.12},{ 0.50,    36.54},{ 0.64,    36.90},{ 0.80,    36.93},{ 1.00,    38.10},{ 1.33,    38.82},{ 1.60,    39.77},{ 2.00,    40.07},{ 2.67,    40.53}},
//   {{ 0.08,     3.97},{ 0.10,     5.35},{ 0.13,     7.94},{ 0.16,    11.10},{ 0.20,    14.09},{ 0.25,    15.73},{ 0.32,    16.38},{ 0.40,    16.48},{ 0.50,    17.15},{ 0.64,    18.30},{ 0.80,    17.82},{ 1.00,    18.37},{ 1.33,    18.16},{ 1.60,    19.45},{ 2.00,    19.07},{ 2.67,    18.98}}   
   {{ 0.08,   155},{ 0.10,   157},{ 0.13,   159},{ 0.16,   165},{ 0.20,   174},{ 0.25,   184},{ 0.32,   196},{ 0.40,   209},{ 0.50,   222},{ 0.64,   235},{ 0.80,   261},{ 1.00,   272},{ 1.33,   284},{ 1.60,   291},{ 2.00,   299},{ 2.67,   307}},
   {{ 0.08,    54},{ 0.10,    56},{ 0.13,    61},{ 0.16,    69},{ 0.20,    77},{ 0.25,    85},{ 0.32,    95},{ 0.40,   103},{ 0.50,   109},{ 0.64,   113},{ 0.80,   115},{ 1.00,   115},{ 1.33,   117},{ 1.60,   117},{ 2.00,   117},{ 2.67,   118}}   
   };
const transistorpowertype rvt38 = 
   {
   1.07, 0.92, 
   0.73, 0.71,
   0.030, 0.005,
   0.2,
//   {{ 0.08, 537.50 },{ 0.09, 534.44 },{ 0.10, 535.00 },{ 0.12, 540.80 },{ 0.16, 556.88 },{ 0.20, 577.50 },{ 0.25, 603.20 },{ 0.32, 636.25 },{ 0.40, 668.25 },{ 0.50, 701.00 },{ 0.64, 736.72 },{ 0.80, 767.37 },{ 1.00, 795.70 },{ 1.33, 828.21 },{ 1.60, 846.25 },{ 2.00, 866.00 },{ 2.67, 887.47 },{ 3.00, 895.33 }},
//   {{ 0.08, 181.25 },{ 0.09, 183.33 },{ 0.10, 187.00 },{ 0.12, 196.80 },{ 0.16, 211.25 },{ 0.20, 227.50 },{ 0.25, 244.00 },{ 0.32, 261.88 },{ 0.40, 274.75 },{ 0.50, 283.00 },{ 0.64, 286.25 },{ 0.80, 285.12 },{ 1.00, 282.10 },{ 1.33, 277.49 },{ 1.60, 275.00 },{ 2.00, 272.35 },{ 2.67, 269.20 },{ 3.00, 267.90 }}
//   {{ 0.08,    42.81},{ 0.10,    54.85},{ 0.13,    61.16},{ 0.16,    66.86},{ 0.20,    73.79},{ 0.25,    77.93},{ 0.32,    82.11},{ 0.40,    83.93},{ 0.50,    87.03},{ 0.64,    87.99},{ 0.80,    88.60},{ 1.00,    91.21},{ 1.33,    92.40},{ 1.60,    95.46},{ 2.00,    95.55},{ 2.67,    95.80}},
//   {{ 0.08,     6.75},{ 0.10,     8.74},{ 0.13,    14.48},{ 0.16,    21.15},{ 0.20,    28.15},{ 0.25,    30.80},{ 0.32,    30.54},{ 0.40,    30.93},{ 0.50,    32.27},{ 0.64,    34.04},{ 0.80,    32.49},{ 1.00,    34.51},{ 1.33,    34.00},{ 1.60,    36.31},{ 2.00,    37.04},{ 2.67,    36.86}}
//   {{ 0.08,    85.62},{ 0.10,   113.68},{ 0.13,   129.49},{ 0.16,   145.66},{ 0.20,   159.88},{ 0.25,   171.44},{ 0.32,   181.95},{ 0.40,   189.32},{ 0.50,   196.64},{ 0.64,   198.54},{ 0.80,   201.39},{ 1.00,   206.34},{ 1.33,   208.58},{ 1.60,   215.29},{ 2.00,   217.94},{ 2.67,   219.40}},
//   {{ 0.08,    15.01},{ 0.10,    20.64},{ 0.13,    34.03},{ 0.16,    51.35},{ 0.20,    69.48},{ 0.25,    78.76},{ 0.32,    78.48},{ 0.40,    80.43},{ 0.50,    83.45},{ 0.64,    90.82},{ 0.80,    90.02},{ 1.00,    92.82},{ 1.33,    93.30},{ 1.60,   101.47},{ 2.00,   103.05},{ 2.67,   101.67}}
//   {{ 0.08,    18.53},{ 0.10,    23.61},{ 0.13,    26.07},{ 0.16,    28.54},{ 0.20,    31.24},{ 0.25,    32.29},{ 0.32,    33.90},{ 0.40,    35.12},{ 0.50,    36.54},{ 0.64,    36.90},{ 0.80,    36.93},{ 1.00,    38.10},{ 1.33,    38.82},{ 1.60,    39.77},{ 2.00,    40.07},{ 2.67,    40.53}},
//   {{ 0.08,     3.97},{ 0.10,     5.35},{ 0.13,     7.94},{ 0.16,    11.10},{ 0.20,    14.09},{ 0.25,    15.73},{ 0.32,    16.38},{ 0.40,    16.48},{ 0.50,    17.15},{ 0.64,    18.30},{ 0.80,    17.82},{ 1.00,    18.37},{ 1.33,    18.16},{ 1.60,    19.45},{ 2.00,    19.07},{ 2.67,    18.98}}   
   {{ 0.08,   108},{ 0.10,   110},{ 0.13,   115},{ 0.16,   121},{ 0.20,   127},{ 0.25,   134},{ 0.32,   143},{ 0.40,   151},{ 0.50,   159},{ 0.64,   168},{ 0.80,   176},{ 1.00,   183},{ 1.33,   190},{ 1.60,   195},{ 2.00,   199},{ 2.67,   205}},
   {{ 0.08,    30},{ 0.10,    32},{ 0.13,    35},{ 0.16,    39},{ 0.20,    43},{ 0.25,    47},{ 0.32,    52},{ 0.40,   56},{ 0.50,   59},{ 0.64,   61},{ 0.80,   62},{ 1.00,   63},{ 1.33,   63},{ 1.60,   64},{ 2.00,   64},{ 2.67,   64}}   
   };
const transistorpowertype hvt = 
   {
   0.93, 0.79, 
   0.79, 0.78,
   0.030, 0.005,
   0.2,
//   {{ 0.08, 66.25 },{ 0.09, 70.00 },{ 0.10, 73.00 },{ 0.12, 80.00 },{ 0.16, 88.12 },{ 0.20, 96.00 },{ 0.25, 103.20 },{ 0.32, 110.94 },{ 0.40, 117.00 },{ 0.50, 122.60 },{ 0.64, 127.97 },{ 0.80, 132.12 },{ 1.00, 135.80 },{ 1.33, 139.61 },{ 1.60, 141.69 },{ 2.00, 143.90 },{ 2.67, 146.14 },{ 3.00, 146.90 }},
//   {{ 0.08, 63.75 },{ 0.09, 62.22 },{ 0.10, 61.00 },{ 0.12, 59.20 },{ 0.16, 58.75 },{ 0.20, 59.00 },{ 0.25,  60.40 },{ 0.32,  62.81 },{ 0.40,  66.25 },{ 0.50,  70.20 },{ 0.64,  75.31 },{ 0.80,  80.37 },{ 1.00,  85.20 },{ 1.33,  90.32 },{ 1.60,  92.56 },{ 2.00,  94.15 },{ 2.67,  94.79 },{ 3.00,  94.70 }}
//   {{ 0.08,    23.36},{ 0.10,    27.40},{ 0.13,    29.82},{ 0.16,    31.19},{ 0.20,    34.12},{ 0.25,    34.87},{ 0.32,    35.93},{ 0.40,    37.04},{ 0.50,    37.34},{ 0.64,    38.07},{ 0.80,    38.89},{ 1.00,    38.86},{ 1.33,    40.09},{ 1.60,    40.72},{ 2.00,    41.51},{ 2.67,    41.85}},
//   {{ 0.08,     3.33},{ 0.10,     4.73},{ 0.13,     6.03},{ 0.16,     6.71},{ 0.20,     8.06},{ 0.25,     8.48},{ 0.32,     8.15},{ 0.40,     8.35},{ 0.50,     8.58},{ 0.64,     9.17},{ 0.80,     8.58},{ 1.00,     8.68},{ 1.33,     9.04},{ 1.60,     8.88},{ 2.00,     9.33},{ 2.67,     9.41}}
//   {{ 0.08,    46.99},{ 0.10,    56.23},{ 0.13,    61.46},{ 0.16,    65.77},{ 0.20,    72.41},{ 0.25,    75.87},{ 0.32,    77.34},{ 0.40,    80.59},{ 0.50,    82.41},{ 0.64,    84.88},{ 0.80,    86.58},{ 1.00,    86.90},{ 1.33,    89.02},{ 1.60,    91.01},{ 2.00,    92.70},{ 2.67,    93.16}},
//   {{ 0.08,     3.51},{ 0.10,     5.08},{ 0.13,     7.83},{ 0.16,    11.14},{ 0.20,    14.93},{ 0.25,    16.22},{ 0.32,    15.43},{ 0.40,    16.39},{ 0.50,    16.86},{ 0.64,    18.27},{ 0.80,    17.56},{ 1.00,    18.07},{ 1.33,    18.67},{ 1.60,    19.22},{ 2.00,    19.59},{ 2.67,    19.87}}
   {{ 0.08,     19},{ 0.10,    21},{ 0.125,    23},{ 0.16,    25},{ 0.20,    27},{ 0.25,    30},{ 0.32,    32},{ 0.40,    34},{ 0.50,    36},{ 0.64,    37},{ 0.80,    38},{ 1.00,    39},{ 1.33,    41},{ 1.60,    41},{ 2.00,    42},{ 2.67,    43}},
   {{ 0.08,     15},{ 0.10,    15},{ 0.125,    15},{ 0.16,    16},{ 0.20,    17},{ 0.25,    18},{ 0.32,    19},{ 0.40,    20},{ 0.50,    22},{ 0.64,    24},{ 0.80,    27},{ 1.00,    29},{ 1.33,    31},{ 1.60,    32},{ 2.00,    33},{ 2.67,    34}}   
   };
const transistorpowertype hvt34 = 
   {
   .98, 0.835, 
   0.79, 0.78,
   0.030, 0.005,
   0.2,
//   {{ 0.08, 28.75 },{ 0.09, 30.00 },{ 0.10, 32.00 },{ 0.12, 34.40 },{ 0.16, 38.12 },{ 0.20, 41.50 },{ 0.25, 44.40 },{ 0.32, 47.50 },{ 0.40, 50.25 },{ 0.50, 52.40 },{ 0.64, 54.69 },{ 0.80, 56.38 },{ 1.00, 57.90 },{ 1.33, 59.49 },{ 1.60, 60.37 },{ 2.00, 61.25 },{ 2.67, 62.19 },{ 3.00, 62.50 }},
//   {{ 0.08, 21.25 },{ 0.09, 20.00 },{ 0.10, 20.00 },{ 0.12, 19.20 },{ 0.16, 18.75 },{ 0.20, 19.00 },{ 0.25, 19.20 },{ 0.32, 19.69 },{ 0.40, 20.50 },{ 0.50, 21.60 },{ 0.64, 22.97 },{ 0.80, 24.25 },{ 1.00, 25.50 },{ 1.33, 26.78 },{ 1.60, 27.31 },{ 2.00, 27.70 },{ 2.67, 27.79 },{ 3.00, 27.73 }}
//   {{ 0.08,    13.35},{ 0.10,    15.70},{ 0.13,    16.53},{ 0.16,    17.41},{ 0.20,    18.74},{ 0.25,    19.58},{ 0.32,    20.60},{ 0.40,    20.98},{ 0.50,    21.27},{ 0.64,    21.65},{ 0.80,    21.74},{ 1.00,    22.26},{ 1.33,    22.53},{ 1.60,    23.92},{ 2.00,    24.04},{ 2.67,    24.18}},
//   {{ 0.08,     2.45},{ 0.10,     3.33},{ 0.13,     3.76},{ 0.16,     3.46},{ 0.20,     3.73},{ 0.25,     3.88},{ 0.32,     3.79},{ 0.40,     3.85},{ 0.50,     4.04},{ 0.64,     4.19},{ 0.80,     3.94},{ 1.00,     4.08},{ 1.33,     4.08},{ 1.60,     4.22},{ 2.00,     4.31},{ 2.67,     4.21}}
//   {{ 0.08,    25.04},{ 0.10,    30.34},{ 0.13,    32.49},{ 0.16,    35.01},{ 0.20,    38.05},{ 0.25,    40.66},{ 0.32,    42.58},{ 0.40,    43.40},{ 0.50,    44.67},{ 0.64,    45.43},{ 0.80,    45.76},{ 1.00,    47.21},{ 1.33,    48.26},{ 1.60,    51.02},{ 2.00,    50.73},{ 2.67,    51.62}},
//   {{ 0.08,     2.00},{ 0.10,     2.91},{ 0.13,     4.10},{ 0.16,     4.94},{ 0.20,     5.95},{ 0.25,     6.34},{ 0.32,     6.13},{ 0.40,     6.25},{ 0.50,     6.71},{ 0.64,     7.08},{ 0.80,     6.73},{ 1.00,     7.00},{ 1.33,     7.26},{ 1.60,     7.68},{ 2.00,     7.71},{ 2.67,     7.62}}
//   {{ 0.08,     6.15},{ 0.10,     7.11},{ 0.125,     7.63},{ 0.16,     7.99},{ 0.20,     8.40},{ 0.25,     8.76},{ 0.32,     9.28},{ 0.40,     9.26},{ 0.50,     9.50},{ 0.64,     9.49},{ 0.80,     9.71},{ 1.00,     9.84},{ 1.33,     9.93},{ 1.60,    10.56},{ 2.00,    10.58},{ 2.67,    10.89}},
//   {{ 0.08,     5.13},{ 0.10,     7.76},{ 0.125,     8.20},{ 0.16,     5.04},{ 0.20,     3.86},{ 0.25,     3.63},{ 0.32,     3.63},{ 0.40,     3.84},{ 0.50,     4.04},{ 0.64,     3.99},{ 0.80,     3.79},{ 1.00,     4.02},{ 1.33,     3.78},{ 1.60,     3.78},{ 2.00,     3.84},{ 2.67,     3.72}}
   {{ 0.08,     9},{ 0.10,   10},{ 0.125,   11},{ 0.16,   11},{ 0.20,   12},{ 0.25,   13},{ 0.32,   14},{ 0.40,   15},{ 0.50,   16},{ 0.64,   16},{ 0.80,   17},{ 1.00,   17},{ 1.33,    17},{ 1.60,    18},{ 2.00,    18},{ 2.67,    19}},
   {{ 0.08,     5},{ 0.10,    5},{ 0.125,    6},{ 0.16,    6},{ 0.20,    6},{ 0.25,    6},{ 0.32,    7},{ 0.40,    7},{ 0.50,    8},{ 0.64,    8},{ 0.80,    9},{ 1.00,    9},{ 1.33,    10},{ 1.60,    10},{ 2.00,    11},{ 2.67,    11}}   
   };
const transistorpowertype hvt38 = 
   {
   .98, 0.835, 
   0.79, 0.78,
   0.030, 0.005,
   0.2,
//   {{ 0.08, 28.75 },{ 0.09, 30.00 },{ 0.10, 32.00 },{ 0.12, 34.40 },{ 0.16, 38.12 },{ 0.20, 41.50 },{ 0.25, 44.40 },{ 0.32, 47.50 },{ 0.40, 50.25 },{ 0.50, 52.40 },{ 0.64, 54.69 },{ 0.80, 56.38 },{ 1.00, 57.90 },{ 1.33, 59.49 },{ 1.60, 60.37 },{ 2.00, 61.25 },{ 2.67, 62.19 },{ 3.00, 62.50 }},
//   {{ 0.08, 21.25 },{ 0.09, 20.00 },{ 0.10, 20.00 },{ 0.12, 19.20 },{ 0.16, 18.75 },{ 0.20, 19.00 },{ 0.25, 19.20 },{ 0.32, 19.69 },{ 0.40, 20.50 },{ 0.50, 21.60 },{ 0.64, 22.97 },{ 0.80, 24.25 },{ 1.00, 25.50 },{ 1.33, 26.78 },{ 1.60, 27.31 },{ 2.00, 27.70 },{ 2.67, 27.79 },{ 3.00, 27.73 }}
//   {{ 0.08,    13.35},{ 0.10,    15.70},{ 0.13,    16.53},{ 0.16,    17.41},{ 0.20,    18.74},{ 0.25,    19.58},{ 0.32,    20.60},{ 0.40,    20.98},{ 0.50,    21.27},{ 0.64,    21.65},{ 0.80,    21.74},{ 1.00,    22.26},{ 1.33,    22.53},{ 1.60,    23.92},{ 2.00,    24.04},{ 2.67,    24.18}},
//   {{ 0.08,     2.45},{ 0.10,     3.33},{ 0.13,     3.76},{ 0.16,     3.46},{ 0.20,     3.73},{ 0.25,     3.88},{ 0.32,     3.79},{ 0.40,     3.85},{ 0.50,     4.04},{ 0.64,     4.19},{ 0.80,     3.94},{ 1.00,     4.08},{ 1.33,     4.08},{ 1.60,     4.22},{ 2.00,     4.31},{ 2.67,     4.21}}
//   {{ 0.08,    25.04},{ 0.10,    30.34},{ 0.13,    32.49},{ 0.16,    35.01},{ 0.20,    38.05},{ 0.25,    40.66},{ 0.32,    42.58},{ 0.40,    43.40},{ 0.50,    44.67},{ 0.64,    45.43},{ 0.80,    45.76},{ 1.00,    47.21},{ 1.33,    48.26},{ 1.60,    51.02},{ 2.00,    50.73},{ 2.67,    51.62}},
//   {{ 0.08,     2.00},{ 0.10,     2.91},{ 0.13,     4.10},{ 0.16,     4.94},{ 0.20,     5.95},{ 0.25,     6.34},{ 0.32,     6.13},{ 0.40,     6.25},{ 0.50,     6.71},{ 0.64,     7.08},{ 0.80,     6.73},{ 1.00,     7.00},{ 1.33,     7.26},{ 1.60,     7.68},{ 2.00,     7.71},{ 2.67,     7.62}}
//   {{ 0.08,     6.15},{ 0.10,     7.11},{ 0.125,     7.63},{ 0.16,     7.99},{ 0.20,     8.40},{ 0.25,     8.76},{ 0.32,     9.28},{ 0.40,     9.26},{ 0.50,     9.50},{ 0.64,     9.49},{ 0.80,     9.71},{ 1.00,     9.84},{ 1.33,     9.93},{ 1.60,    10.56},{ 2.00,    10.58},{ 2.67,    10.89}},
//   {{ 0.08,     5.13},{ 0.10,     7.76},{ 0.125,     8.20},{ 0.16,     5.04},{ 0.20,     3.86},{ 0.25,     3.63},{ 0.32,     3.63},{ 0.40,     3.84},{ 0.50,     4.04},{ 0.64,     3.99},{ 0.80,     3.79},{ 1.00,     4.02},{ 1.33,     3.78},{ 1.60,     3.78},{ 2.00,     3.84},{ 2.67,     3.72}}
   {{ 0.08,     6},{ 0.10,   7},{ 0.125,   7},{ 0.16,   8},{ 0.20,   8},{ 0.25,   9},{ 0.32,   9},{ 0.40,  9},{ 0.50,   9},{ 0.64,   10},{ 0.80,   10},{ 1.00,   10},{ 1.33,    11},{ 1.60,    11},{ 2.00,    11},{ 2.67,    11}},
   {{ 0.08,     3},{ 0.10,   3},{ 0.125,   3},{ 0.16,   3},{ 0.20,   3},{ 0.25,   3},{ 0.32,   4},{ 0.40,  4},{ 0.50,   4},{ 0.64,    4},{ 0.80,    5},{ 1.00,    5},{ 1.33,     5},{ 1.60,     5},{ 2.00,     5},{ 2.67,     5}}   
   };
const transistorpowertype sram = 
   {
   0.63, 0.691,     // this assumes 1 bl is gnd, 1 bl is vdd
   0.5, 0.5,
   0.030, 100.0,     // I made the exponent very large so leakage will be invariant width channel length, it'll just be whatever is in the table
   1.0,
   {{ 0.133, 13.2 }, { 0.162, 30.8 }},
   {{ 0.062, 89 }}
   };


double devicetype::Leakage(vttype forceVt) const  // use VT_ALL to get the real leakage
   {
   transistorpowertype sentinel;
   
   if (forceVt== VT_ALL)
      forceVt = vt;

   const transistorpowertype &pt = 
                                   (finfet && forceVt==VT_SRAM)         ? sram_14nm :
                                   (finfet && forceVt==VT_HIGH)         ? rvt_14nm:
                                   (finfet && forceVt==VT_HIGH_PLA2)    ? rvt2_14nm :
                                   (finfet && forceVt==VT_HIGH_PLA4)    ? rvt2_14nm :
                                   (finfet && forceVt==VT_HIGH_PLA8)    ? rvt2_14nm :
                                   (finfet && forceVt==VT_LOW)          ? lvt_14nm :
                                   (finfet && forceVt==VT_LOW_PLA2)     ? lvt2_14nm :
                                   (finfet && forceVt==VT_LOW_PLA4)     ? lvt2_14nm :
                                   (finfet && forceVt==VT_LOW_PLA8)     ? lvt2_14nm :
                                   (finfet && forceVt==VT_SUPERLOW)     ? svt_14nm :
                                   (finfet && forceVt==VT_SUPERLOW_PLA2)? svt2_14nm :
                                   (finfet && forceVt==VT_SUPERLOW_PLA4)? svt2_14nm :
                                   (finfet && forceVt==VT_SUPERLOW_PLA8)? svt2_14nm :
                                   (finfet && forceVt==VT_NOMINAL)      ? rvt_14nm :
                                   (finfet && forceVt==VT_NOMINAL_PLA2) ? rvt2_14nm : 
                                   (finfet && forceVt==VT_NOMINAL_PLA4) ? rvt2_14nm : 
                                   (finfet && forceVt==VT_NOMINAL_PLA8)?  rvt2_14nm :
                                   (finfet && vt==VT_MEDIUMTHICKOXIDE) ? egvtxx_14nm : 
                                   (finfet) ? sentinel : 

                                   (forceVt==VT_SRAM)         ? sram :
                                   (vt==VT_SRAMNFETWL)         ? sram :
                                   (vt==VT_SRAMNFETPD)         ? sram :
                                   (vt== VT_SRAMPFETPU)         ? sram :
                                   (vt== VT_SRAMNFETWL )         ? sram :
                                   (forceVt==VT_HIGH)         ? hvt :
                                   (forceVt==VT_HIGH_PLA4)    ? hvt34 :
                                   (forceVt==VT_HIGH_PLA8)    ? hvt38 :
                                   (forceVt==VT_LOW)          ? lvt :
                                   (forceVt==VT_LOW_PLA4)     ? lvt34 :
                                   (forceVt==VT_LOW_PLA8)     ? lvt38 :
                                   (forceVt==VT_NOMINAL)      ? rvt :
                                   (forceVt==VT_NOMINAL_PLA4) ? rvt34 : 
                                   (forceVt==VT_NOMINAL_PLA8) ? rvt38 : 
                                   sentinel;
   if (&pt == &sentinel)
     FATAL_ERROR;
   if (type==D_DCAP)
      return 0.0; 
   if (type!=D_NMOS && type!=D_PMOS)
      FATAL_ERROR;
   return pt.InterpolateLeakage(type==D_NMOS, (fingers>1) ? (width/fingers) : width, length) * ((fingers>1) ? fingers : 1.0);
   }
double devicetype::GateCap() const // returns fF
   {
   transistorpowertype sentinel;
   const transistorpowertype &pt = 
                                   (finfet && vt==VT_SRAM)         ? sram_14nm :
                                   (finfet && vt==VT_HIGH)         ? rvt2_14nm:
                                   (finfet && vt==VT_HIGH_PLA2)    ? rvt2_14nm :
                                   (finfet && vt==VT_HIGH_PLA4)    ? rvt2_14nm :
                                   (finfet && vt==VT_HIGH_PLA8) ? rvt2_14nm    :
                                   (finfet && vt==VT_LOW)          ? lvt_14nm :
                                   (finfet && vt==VT_LOW_PLA2)     ? lvt2_14nm :
                                   (finfet && vt==VT_LOW_PLA4)     ? lvt2_14nm :
                                   (finfet && vt==VT_LOW_PLA8)     ? lvt2_14nm :
                                   (finfet && vt==VT_SUPERLOW)     ? svt_14nm :
                                   (finfet && vt==VT_SUPERLOW_PLA2)? svt2_14nm :
                                   (finfet && vt==VT_SUPERLOW_PLA4)? svt2_14nm :
                                   (finfet && vt==VT_SUPERLOW_PLA8)? svt2_14nm :
                                   (finfet && vt==VT_NOMINAL)      ? rvt_14nm :
                                   (finfet && vt==VT_NOMINAL_PLA2) ? rvt2_14nm : 
                                   (finfet && vt==VT_NOMINAL_PLA4) ? rvt2_14nm : 
                                   (finfet && vt==VT_NOMINAL_PLA8) ? rvt2_14nm : 
                                   (finfet && vt==VT_MEDIUMTHICKOXIDE) ? egvtxx_14nm : 
                                   (finfet) ? sentinel : 

                                   (vt==VT_SRAM)         ? sram :
                                   (vt==VT_SRAMNFETWL)         ? sram :
                                   (vt==VT_SRAMNFETPD)         ? sram :
                                   (vt== VT_SRAMPFETPU)         ? sram :
                                   (vt== VT_SRAMNFETWL )         ? sram :
                                   (vt==VT_HIGH)         ? hvt :
                                   (vt==VT_HIGH_PLA4)    ? hvt34 :
                                   (vt==VT_HIGH_PLA8)    ? hvt38 :
                                   (vt==VT_LOW)          ? lvt :
                                   (vt==VT_LOW_PLA4)     ? lvt34 :
                                   (vt==VT_LOW_PLA8)     ? lvt38 :
                                   (vt==VT_NOMINAL)      ? rvt :
                                   (vt==VT_NOMINAL_PLA4) ? rvt34 : 
                                   (vt==VT_NOMINAL_PLA8) ? rvt38 : 
                                   sentinel;
   if (&pt == &sentinel){
     printf("devicetype::GateCap unknown vt type %d for %s\n", vt, name);
     FATAL_ERROR;
   }
   if (type==D_DCAP)
      return 1.0e12; // return 1 F
   if (type!=D_NMOS && type!=D_PMOS)
      FATAL_ERROR;
   return (type==D_NMOS ? pt.nmos_gate_capacitance : pt.pmos_gate_capacitance) * width;
   }
double devicetype::DiffCap() const // returns fF
   {
   transistorpowertype sentinel;
   const transistorpowertype &pt = 
                                   (finfet && vt==VT_SRAM)         ? sram_14nm :
                                   (finfet && vt==VT_HIGH)         ? rvt_14nm:
                                   (finfet && vt==VT_HIGH_PLA2)    ? rvt2_14nm :
                                   (finfet && vt==VT_HIGH_PLA4)    ? rvt2_14nm :
                                   (finfet && vt==VT_HIGH_PLA8)    ? rvt2_14nm :
                                   (finfet && vt==VT_LOW)          ? lvt_14nm :
                                   (finfet && vt==VT_LOW_PLA2)     ? lvt2_14nm :
                                   (finfet && vt==VT_LOW_PLA4)     ? lvt2_14nm :
                                   (finfet && vt==VT_LOW_PLA8)     ? lvt2_14nm :
                                   (finfet && vt==VT_SUPERLOW)     ? svt_14nm :
                                   (finfet && vt==VT_SUPERLOW_PLA2)? svt2_14nm :
                                   (finfet && vt==VT_SUPERLOW_PLA4)? svt2_14nm :
                                   (finfet && vt==VT_SUPERLOW_PLA8)? svt2_14nm :
                                   (finfet && vt==VT_NOMINAL)      ? rvt_14nm :
                                   (finfet && vt==VT_NOMINAL_PLA2) ? rvt2_14nm : 
                                   (finfet && vt==VT_NOMINAL_PLA4) ? rvt2_14nm : 
                                   (finfet && vt==VT_NOMINAL_PLA8) ? rvt2_14nm : 
                                   (finfet && vt==VT_MEDIUMTHICKOXIDE) ? egvtxx_14nm : 
                                   (finfet) ? sentinel : 

                                   (vt==VT_SRAM)         ? sram :
                                   (vt==VT_SRAMNFETWL)         ? sram :
                                   (vt==VT_SRAMNFETPD)         ? sram :
                                   (vt== VT_SRAMPFETPU)         ? sram :
                                   (vt== VT_SRAMNFETWL )         ? sram :
                                   (vt==VT_HIGH)         ? hvt :
                                   (vt==VT_HIGH_PLA4)    ? hvt34 :
                                   (vt==VT_HIGH_PLA8)    ? hvt38 :
                                   (vt==VT_LOW)          ? lvt :
                                   (vt==VT_LOW_PLA4)     ? lvt34 :
                                   (vt==VT_LOW_PLA8)     ? lvt38 :
                                   (vt==VT_NOMINAL)      ? rvt :
                                   (vt==VT_NOMINAL_PLA4) ? rvt34 : 
                                   (vt==VT_NOMINAL_PLA8) ? rvt38 : 
                                   sentinel;
   if (&pt == &sentinel)
      FATAL_ERROR;
   if (type==D_DCAP)
      return 1.0e12; // return 1 F
   if (type!=D_NMOS && type!=D_PMOS)
      FATAL_ERROR;
   return (type==D_NMOS ? pt.nmos_diff_capacitance : pt.pmos_diff_capacitance) * width;
   }
double devicetype::Leak2HighRDerate() const
   {
   transistorpowertype sentinel;
   const transistorpowertype &pt = 
                                   (finfet && vt==VT_SRAM)         ? sram_14nm :
                                   (finfet && vt==VT_HIGH)         ? rvt2_14nm:
                                   (finfet && vt==VT_HIGH_PLA2)    ? rvt2_14nm :
                                   (finfet && vt==VT_HIGH_PLA4)    ? rvt2_14nm :
                                   (finfet && vt==VT_LOW)          ? lvt_14nm :
                                   (finfet && vt==VT_LOW_PLA2)     ? lvt2_14nm :
                                   (finfet && vt==VT_LOW_PLA4)     ? lvt4_14nm :
                                   (finfet && vt==VT_SUPERLOW)     ? svt_14nm :
                                   (finfet && vt==VT_SUPERLOW_PLA2)? svt2_14nm :
                                   (finfet && vt==VT_SUPERLOW_PLA4)? svt4_14nm :
                                   (finfet && vt==VT_NOMINAL)      ? rvt_14nm :
                                   (finfet && vt==VT_NOMINAL_PLA2) ? rvt2_14nm : 
                                   (finfet && vt==VT_NOMINAL_PLA4) ? rvt4_14nm : 
                                   (finfet && vt==VT_MEDIUMTHICKOXIDE) ? egvtxx_14nm : 
                                   (finfet) ? sentinel : 

                                   (vt==VT_SRAM)         ? sram :
                                   (vt==VT_SRAMNFETWL)         ? sram :
                                   (vt==VT_SRAMNFETPD)         ? sram :
                                   (vt== VT_SRAMPFETPU)         ? sram :
                                   (vt== VT_SRAMNFETWL )         ? sram :
                                   (vt==VT_HIGH)         ? hvt :
                                   (vt==VT_HIGH_PLA4)    ? hvt34 :
                                   (vt==VT_HIGH_PLA8)    ? hvt38 :
                                   (vt==VT_LOW)          ? lvt :
                                   (vt==VT_LOW_PLA4)     ? lvt34 :
                                   (vt==VT_LOW_PLA8)     ? lvt38 :
                                   (vt==VT_NOMINAL)      ? rvt :
                                   (vt==VT_NOMINAL_PLA4) ? rvt34 : 
                                   (vt==VT_NOMINAL_PLA8) ? rvt38 : 
                                   sentinel;
   if (&pt == &sentinel)
     FATAL_ERROR;
   return pt.two_high_derating;
   }



/* These are 65nm numbers 
double NGATE_CAPACITANCE    = 1.20;  // FF / um channel width. Channel length is ignored .
double NDIFF_CAPACITANCE    = 0.85;  // FF / um channel width.
double PGATE_CAPACITANCE    = 1.25;  // FF / um channel width. Channel length is ignored .
double PDIFF_CAPACITANCE    = 0.8;   // FF / um channel width.
const double POWER_VOLTAGE  = 1.1;
const double MIN_LENGTH = 0.05;

n4_sch_feas/sherlock_leak_param 65nm Monte Average leakage (nA/um) at 1.1V, 125C 
const interpolatetype leaktable_highN[] = {{0.2, 124.7}, {0.3,  85.7}, {0.4,  76.2}, {0.6, 65.1}, {1.0,  59.4}, {2.0,  58.5}, {10.0,  52.8}, {0.0, 0.0} }; 
const interpolatetype leaktable_highP[] = {{0.2,  23.2}, {0.3,  21.8}, {0.4,  22.1}, {0.6, 21.9}, {1.0,  22.4}, {2.0,  23.3}, {10.0,  26.2}, {0.0, 0.0} }; 
const interpolatetype leaktable_nomN[]  = {{0.2, 297.9}, {0.3, 208.7}, {0.4, 189.1}, {0.6, 169.3}, {1.0, 156.3}, {2.0, 149.8}, {10.0, 152.1}, {0.0, 0.0} }; 
const interpolatetype leaktable_nomP[]  = {{0.2,  87.9}, {0.3,  92.4}, {0.4,  95.5}, {0.6, 100.8}, {1.0, 101.6}, {2.0, 115.6}, {10.0, 126.7}, {0.0, 0.0} }; 
const interpolatetype leaktable_lowN[]  = {{0.2,1173.4}, {0.3, 923.6}, {0.4, 888.5}, {0.6, 796.2}, {1.0, 749.4}, {2.0, 751.5}, {10.0, 763.7}, {0.0, 0.0} }; 
const interpolatetype leaktable_lowP[]  = {{0.2, 241.2}, {0.3, 260.7}, {0.4, 311.5}, {0.6, 344.6}, {1.0, 425.0}, {2.0, 604.3}, {10.0, 948.6}, {0.0, 0.0} };
const interpolatetype leaktable_sramN[] = {{0.090, 6.21}, {0.095, 39.58}, {0.145, 22.28},{0.190,  47.94}, {0.0, 0.0}};
const interpolatetype leaktable_sramP[] = {{0.090, 7.26}, {0.095, 41.45}, {0.0, 0.0}};


// n4_sch_feas/sherlock_leak_param 65nm TT leakage (nA/um) at 1.1V, 100C 
const interpolatetype leaktable_nomN[]  = {{0.2, 106.1}, {0.3,  82.4}, {0.4,  78.4}, {0.6,  70.9}, {1.0,  67.4}, {2.0,  67.7}, {10.0,  68.2}, {0.0, 0.0}  }; 
const interpolatetype leaktable_highN[] = {{0.2,  39.7}, {0.3,  30.7}, {0.4,  27.9}, {0.6,  25.0}, {1.0,  23.1}, {2.0,  22.2}, {10.0,  21.6}, {0.0, 0.0}  }; 
const interpolatetype leaktable_lowN[]  = {{0.2, 587.8}, {0.3, 479.6}, {0.4, 468.1}, {0.6, 433.2}, {1.0, 420.3}, {2.0, 428.3}, {10.0, 436.7}, {0.0, 0.0}  }; 
const interpolatetype leaktable_nomP[]  = {{0.2,  32.5}, {0.3,  34.9}, {0.4,  39.9}, {0.6,  41.7}, {1.0,  44.0}, {2.0,  49.8}, {10.0,  57.2}, {0.0, 0.0}  };
const interpolatetype leaktable_highP[] = {{0.2,   8.0}, {0.3,   8.3}, {0.4,   8.9}, {0.6,   9.1}, {1.0,   9.4}, {2.0,  10.2}, {10.0,  11.5}, {0.0, 0.0}  };
const interpolatetype leaktable_lowP[]  = {{0.2,  96.6}, {0.3, 106.5}, {0.4, 135.0}, {0.6, 158.4}, {1.0, 200.8}, {2.0, 300.8}, {10.0, 503.9}, {0.0, 0.0}  };
const interpolatetype leaktable_sramN[] = {{0.090, 2.26}, {0.095, 12.82}, {0.145, 8.41},{0.190,  21.39}, {0.0, 0.0} }; 
const interpolatetype leaktable_sramP[] = {{0.090, 2.10}, {0.095, 13.30}, {0.0, 0.0} };
*/


/* 65nm SRAM leakage numbers
Type Device           width  length  Leakage(nA)  Leakage (nA/um)
N    sram_pg_dense    0.090  0.060     0.56         6.21
N    sram_pg_std      0.095  0.065     3.76        39.58
N    sram_pd_dense    0.145  0.055     3.23        22.28
N    sram_pd_std      0.190  0.055     9.11        47.94
P    sram_pu_dense    0.090  0.055     0.65         7.26
P    sram_pu_std      0.095  0.050     3.94        41.45
*/




/* These are .13um numbers      
const float NGATE_CAPACITANCE    = (float)2.34;   // FF / um channel width. Channel length is ignored .
const float NDIFF_CAPACITANCE    = (float)0.75;   // FF / um channel width.
const float PGATE_CAPACITANCE    = (float)2.18;   // FF / um channel width. Channel length is ignored .
const float PDIFF_CAPACITANCE    = (float)0.75;   // FF / um channel width.
const float POWER_VOLTAGE        = (float)1.1;
*/

/* 90nm numbers
double NGATE_CAPACITANCE    = 1.5;   // FF / um channel width. Channel length is ignored .
double NDIFF_CAPACITANCE    = 0.5;   // FF / um channel width.
double PGATE_CAPACITANCE    = 1.5;   // FF / um channel width. Channel length is ignored .
double PDIFF_CAPACITANCE    = 0.5;   // FF / um channel width.
const double POWER_VOLTAGE        = 1.2;
const double MIN_LENGTH = 0.10;

const interpolatetype leaktable_highN[] = {{0.2, 105}, {0.4,  90}, {0.6,  90}, {1.0,  92}, {2.0, 120}, {4.0, 135}, {0.0, 0.0}};
const interpolatetype leaktable_highP[] = {{0.2,  35}, {0.4,  42}, {0.6,  54}, {1.0,  67}, {2.0, 115}, {4.0, 142}, {0.0, 0.0}};
const interpolatetype leaktable_nomN[]  = {{0.2, 245}, {0.4, 245}, {0.6, 245}, {1.0, 245}, {2.0, 335}, {4.0, 395}, {0.0, 0.0}};
const interpolatetype leaktable_nomP[]  = {{0.2, 155}, {0.4, 220}, {0.6, 280}, {1.0, 370}, {2.0, 555}, {4.0, 670}, {0.0, 0.0}};
const interpolatetype leaktable_lowN[]  = {{0.2, 420}, {0.4, 410}, {0.6, 450}, {1.0, 440}, {2.0, 655}, {4.0, 810}, {0.0, 0.0}};
const interpolatetype leaktable_lowP[]  = {{0.2, 245}, {0.4, 360}, {0.6, 460}, {1.0, 585}, {2.0, 890}, {4.0, 1060}, {0.0, 0.0}};
const interpolatetype leaktable_sramN[] = {{0.1, 4},   {0.2, 4},   {0.0, 0.0}};
const interpolatetype leaktable_sramP[] = {{0.1, 25},  {0.2, 25},  {0.0, 0.0}};
*/
/**/




                        

